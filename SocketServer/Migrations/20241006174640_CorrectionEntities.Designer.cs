// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocketServer.Data;

#nullable disable

namespace SocketServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241006174640_CorrectionEntities")]
    partial class CorrectionEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("SocketServer.Entities.AccessLog", b =>
                {
                    b.Property<int>("idAccessLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccessLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("idDevice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("idAccessLog");

                    b.HasIndex("idDevice");

                    b.HasIndex("idUser");

                    b.ToTable("AccessLogs");
                });

            modelBuilder.Entity("SocketServer.Entities.Device", b =>
                {
                    b.Property<int>("IdDevice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AlterationDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("AvailableSpace")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnDeviceOsType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastLocation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("OccupiedSpace")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("idUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDevice");

                    b.HasIndex("idUser");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("SocketServer.Entities.EnAction", b =>
                {
                    b.Property<int>("idAction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("idAction");

                    b.ToTable("EnActions");
                });

            modelBuilder.Entity("SocketServer.Entities.EnDeviceOS", b =>
                {
                    b.Property<int>("idDeviceOS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("idDeviceOS");

                    b.ToTable("EnDeviceOSs");
                });

            modelBuilder.Entity("SocketServer.Entities.EnStatus", b =>
                {
                    b.Property<int>("idStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("idStatus");

                    b.ToTable("EnStatuses");
                });

            modelBuilder.Entity("SocketServer.Entities.History", b =>
                {
                    b.Property<int>("idHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EnActionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idDevice")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("idHistory");

                    b.HasIndex("idDevice");

                    b.HasIndex("idUser");

                    b.ToTable("History");
                });

            modelBuilder.Entity("SocketServer.Entities.Storage", b =>
                {
                    b.Property<int>("IdDevice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("StorageLimitBytes")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UsedStorageBytes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("IdDevice");

                    b.HasIndex("idUser");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("SocketServer.Entities.Transference", b =>
                {
                    b.Property<int>("idTranference")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DestinationPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileExtention")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idDeviceDestination")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idDeviceOrigin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("idUser")
                        .HasColumnType("INTEGER");

                    b.HasKey("idTranference");

                    b.HasIndex("idDeviceDestination");

                    b.HasIndex("idDeviceOrigin");

                    b.HasIndex("idUser");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("SocketServer.Entities.TransferenceLog", b =>
                {
                    b.Property<int>("idTransferenceLog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("EnStatusType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("idTransference")
                        .HasColumnType("INTEGER");

                    b.HasKey("idTransferenceLog");

                    b.HasIndex("idTransference");

                    b.ToTable("TransferenceLogs");
                });

            modelBuilder.Entity("SocketServer.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("IdUser");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SocketServer.Entities.AccessLog", b =>
                {
                    b.HasOne("SocketServer.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("idDevice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocketServer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocketServer.Entities.Device", b =>
                {
                    b.HasOne("SocketServer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocketServer.Entities.History", b =>
                {
                    b.HasOne("SocketServer.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("idDevice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocketServer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocketServer.Entities.Storage", b =>
                {
                    b.HasOne("SocketServer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocketServer.Entities.Transference", b =>
                {
                    b.HasOne("SocketServer.Entities.Device", "DeviceDestination")
                        .WithMany()
                        .HasForeignKey("idDeviceDestination")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocketServer.Entities.Device", "DeviceOrigin")
                        .WithMany()
                        .HasForeignKey("idDeviceOrigin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocketServer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceDestination");

                    b.Navigation("DeviceOrigin");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocketServer.Entities.TransferenceLog", b =>
                {
                    b.HasOne("SocketServer.Entities.Transference", "Transference")
                        .WithMany()
                        .HasForeignKey("idTransference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transference");
                });
#pragma warning restore 612, 618
        }
    }
}
